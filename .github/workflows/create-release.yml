name: Create Release

on:
  workflow_dispatch:
    inputs:
      Create_Branch:
        description: 'Create Release branch?'
        required: false
        type: boolean
        default: false
      BUILD_BUSINESS:
        description: 'Build Business one of In Mea Ph Sea Hsi'
        required: false
        type: 'string'
        default: 'In Mea Ph Sea Hsi'
      HOTFIX:
        description: 'Hotfix Build Generation? Only check when hotfix build generation is requried'
        required: false
        type: 'string'
        default: false
  schedule:
    - cron: '00 04 * * 1' # Every Monday at 9:02 AM IST

jobs:
  release-date-check:
    runs-on: [hs-releng-action-runner]
    outputs:
      release-date: ${{steps.release-date-checker.outputs.release-date}}
    steps:
      - name: Debug Inputs for Release Date Check
        run: |
          echo "Debugging Inputs for Release Date Check:"
          echo "GITHUB_EVENT_NAME=${{ github.event_name }}"
          echo "GITHUB_REF_NAME=${{ github.ref_name }}"
          echo "GITHUB_REF=${{ github.ref }}"
          echo "INPUTS: Create_Branch=${{ inputs.Create_Branch }}, BUILD_BUSINESS=${{ inputs.BUILD_BUSINESS }}, HOTFIX=${{ inputs.HOTFIX }}"
          echo "SCHEDULED_EVENT=${{ github.event.schedule }}"

      - name: Run ReleaseDate Check
        id: release-date-checker
        run: |
          baseDate="2023-03-27"
          gapBetweenReleases=1 # days -> Signifying weekly-Release-cadence
          today=$(date -u +%s)
          start=$(date -u -d "$baseDate" +%s)
          diff=$(( (today - start) / 86400 ))
          if (( diff % $gapBetweenReleases == 0 )); then
            echo "release-date=true" >> "$GITHUB_OUTPUT"
          else
            echo "release-date=false" >> "$GITHUB_OUTPUT"
            echo "today's not a release date, Exiting Workflow"
            exit 1
          fi

create-release:
  needs: release-date-check
  if: ${{ needs.release-date-check.outputs.release-date == 'true' && (inputs.Create_Branch && github.event_name == 'workflow_dispatch') || github.event_name == 'schedule' }}
  runs-on: [hs-releng-action-runner]
  outputs:
    BRANCHNAME: ${{ steps.branch.outputs.BRANCHNAME }}
  steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Initialize mandatory git config
      run: |
        git config user.name "Release Engineering"
        git config user.email releaseengineering.svc@hotstar.com

    - name: Create release branch
      run: |
        BRANCH_NAME="release-$(date +%y-%m-%d)"
        if git ls-remote --exit-code --heads origin $BRANCH_NAME; then
          echo "Branch $BRANCH_NAME already exists on remote. Pulling latest changes..."
          git fetch origin $BRANCH_NAME
          git checkout $BRANCH_NAME
          git pull origin $BRANCH_NAME
        else
          echo "Creating a new branch $BRANCH_NAME"
          git checkout -b $BRANCH_NAME
        fi

    - name: Push new branch
      run: git push origin $BRANCH_NAME

    - name: Getting branch name
      id: branch
      run: echo "BRANCHNAME=$BRANCH_NAME" >> $GITHUB_OUTPUT

  build-dogfood:
    if: ${{ ( (always() && contains(join(needs.*.result, ','), 'success')) || github.event_name == 'workflow_dispatch') }}
    needs: create-release
    runs-on: [hs-releng-action-runner]
    env:
      BUILD_ENV: prod
      BUILD_TYPE: dogfood
      UPLOAD_TO_PLAYSTORE: false
      FIRESTORE_ENABLED: false
    outputs:
      BRANCH: ${{ steps.set-outputs.outputs.BRANCH }}
      BUILD_BUSINESS: ${{ steps.set-outputs.outputs.BUILD_BUSINESS }}
    steps:
      - name: Debug Inputs for Build Dogfood
        run: |
          echo "Debugging Inputs for Build Dogfood:"
          echo "HOTFIX=${{ inputs.HOTFIX }}"
          echo "BRANCH=${{ env.BRANCH }}"
          echo "BUILD_BUSINESS=${{ env.BUILD_BUSINESS }}"
          echo "INPUT BUILD_BUSINESS=${{ github.event.inputs.BUILD_BUSINESS }}"

      - name: Set Hotfix Env
        run: |
          echo "HOTFIX=${{ inputs.HOTFIX }}" >> $GITHUB_ENV
      - name: Set environment name
        if: ${{ github.event_name == 'schedule' }}
        run: |
          echo "BRANCH=${{ needs.create-release.outputs.BRANCHNAME }}" >> $GITHUB_ENV
          echo "BUILD_BUSINESS=In Mea Ph Sea Hsi" >> $GITHUB_ENV

      - name: Set environment name from UI
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.Create_Branch }}
        run: |
          echo "BRANCH=${{ needs.create-release.outputs.BRANCHNAME }}" >> $GITHUB_ENV
          echo "BUILD_BUSINESS=${{ github.event.inputs.BUILD_BUSINESS }}" >> $GITHUB_ENV

      - name: Set environment name from UI
        if: ${{ github.event_name == 'workflow_dispatch' && !inputs.Create_Branch }}
        run: |
          echo "BRANCH=${GITHUB_REF_NAME}" >> $GITHUB_ENV
          echo "BUILD_BUSINESS=${{ github.event.inputs.BUILD_BUSINESS }}" >> $GITHUB_ENV

      - name: Set outputs
        id: set-outputs
        run: |
          echo "BRANCH=$BRANCH" >> $GITHUB_OUTPUT
          echo "BUILD_BUSINESS=$BUILD_BUSINESS" >> $GITHUB_OUTPUT

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH }}

      - name: Start pipeline for dogfood build
        run: . fetch_config secret/non-prod/clients/multi-country-builds  && cd scripts && ./run.sh

  build-release:
    if: ${{ (always() && contains(join(needs.*.result, ','), 'success')) || github.event_name == 'workflow_dispatch' }}
    needs: [create-release, build-dogfood]
    runs-on: [hs-releng-action-runner]
    env:
      BUILD_ENV: prod
      BUILD_TYPE: release
      UPLOAD_TO_PLAYSTORE: true
      FIRESTORE_ENABLED: false
    steps:
      - name: Debug Inputs for Build Release
        run: |
          echo "Debugging Inputs for Build Release:"
          echo "HOTFIX=${{ inputs.HOTFIX }}"
          echo "BRANCH=${{ needs.build-dogfood.outputs.BRANCH }}"
          echo "BUILD_BUSINESS=${{ needs.build-dogfood.outputs.BUILD_BUSINESS }}"

      - name: Set Hotfix Env
        run: |
          echo "HOTFIX=${{ inputs.HOTFIX }}" >> $GITHUB_ENV
      - name: Set environment name
        run: |
          echo "BRANCH=${{ needs.build-dogfood.outputs.BRANCH }}" >> $GITHUB_ENV
          echo "BUILD_BUSINESS=${{ needs.build-dogfood.outputs.BUILD_BUSINESS }}" >> $GITHUB_ENV

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH }}

      - name: Start Multibuild pipeline for release build
        run: . fetch_config secret/non-prod/clients/multi-country-builds  && cd scripts && ./run.sh